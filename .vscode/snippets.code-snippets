{
	"Three.js 基础配置": {
		"prefix": "vthree",
		"body": [
			"const stats = new Stats()",
			"document.body.appendChild(stats.dom)",
			"// 渲染器",
			"const renderer = new WebGLRenderer({ antialias: true })",
			"renderer.setSize(innerWidth, innerHeight)",
			"renderer.setClearColor(0x000000)",
			"document.body.appendChild(renderer.domElement)",
			"",
			"// 场景",
			"const scene = new Scene()",
			"",
			"// 相机",
			"const camera = new PerspectiveCamera(",
			"  75,",
			"  innerWidth / innerHeight,",
			"  0.1,",
			"  1000,",
			")",
			"camera.position.set(5, 2, 5)",
			"// 灯光",
			"const ambient = new AmbientLight(0xFFFFFF, 2) // 环境灯光",
			"// 将光源加入场景",
			"scene.add(ambient)",
			"",
			"const mesh = new Mesh(",
			"  new BoxGeometry(1, 1, 1),",
			"  new MeshBasicMaterial({ color: 0xFF5C00 }),",
			")",
			"// 将网格加入场景",
			"scene.add(mesh)",
			"",
			"// 控制器",
			"const controls = new OrbitControls(camera, renderer.domElement)",
			"controls.enableDamping = true",
			"const clock = new Clock()",
			"",
			"function animate() {",
			"  const _delta = clock.getDelta()",
			"  stats.update()",
			"  camera.updateProjectionMatrix()",
			"  renderer.render(scene, camera)",
			"  requestAnimationFrame(animate)",
			"}",
			"animate()",
			"",
			"function resize() {",
			"  camera.aspect = innerWidth / innerHeight",
			"  camera.updateProjectionMatrix()",
			"  renderer.setSize(innerWidth, innerHeight)",
			"}",
			"window.addEventListener('resize', resize)",
			""
		],
		"description": "Three.js 基础配置"
	},
	"glsl 着色器": {
		"scope": "javascript,typescript",
		"prefix": "glsl",
		"body": [
			"export const vertexShader = `",
			"void main(){",
			"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);",
			"}",
			"`",
			"export const fragmentShader = `",
			"uniform vec2 u_resolution;",
			"uniform vec2 u_mouse;",
			"void main(){",
			"    vec2 st = gl_FragCoord.xy/u_resolution;",
			"    float c = 1.0 - distance(st, u_mouse);",
			"    float color = pow(c, 10.0);",
			"    gl_FragColor = vec4(vec3(color), 1.0);",
			"}",
			"`",
			"export const uniforms = {",
			"  u_resolution: {",
			"    type: 'v2',",
			"    value: new Vector2(innerWidth, innerHeight),",
			"  },",
			"  u_mouse: {",
			"    type: 'v2',",
			"    value: new Vector2(),",
			"  },",
			"}"
		],
		"description": "最简单的顶点、片元着色器"
	},
	"glsl 全局变量": {
		"scope": "javascript,typescript",
		"prefix": "glslglobal",
		"body": [
			"// gl_PointSize: 在点渲染模式中, 控制方形点区域渲染像素大小",
			"// gl_Position: 控制顶点选完的位置",
			"// gl_FragColor: 片元的RGB颜色值",
			"// gl_FragCoord: 片元的坐标, 同样是以像素为单位",
			"// gl_PointCoord: 在点渲染模式中, 对应方形像素坐标"
		]
	},
	"坐标系统": {
		"scope": "javascript,typescript",
		"prefix": "wac",
		"body": [
			"/** 鼠标坐标 */",
			"const mouse = { value: new Vector2() }",
			"/** 屏幕坐标 -> 标准设备坐标 -> 世界坐标 */",
			"window.addEventListener('click', (event: MouseEvent) => {",
			"  mouse.value.x = (event.clientX / innerWidth) * 2 - 1",
			"  mouse.value.y = -(event.clientY / innerHeight) * 2 + 1",
			"})",
		]
	},
}